on:
  workflow_call:
    inputs:
      workspace:
        description: "Terraform workspace"
        required: true
        type: string
      image_tag:
        description: "Image tag to use"
        required: false
        type: string
        default: ""
      apply:
        description: "Whether to apply terraform"
        required: false
        type: boolean
        default: false
      account_name:
        required: false
        type: string
        default: development
        description: "Account to get credentials for"

jobs:
  terraform_workflow:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: unfor19/install-aws-cli-action@e8b481e524a99f37fbd39fdc1dcb3341ab091367 # v1

      - id: terraform_version
        name: get terraform version
        uses: ministryofjustice/opg-github-actions/.github/actions/terraform-version@9698787723a6a964ef9816066d9299568d8d359e # v3.1.0
        with:
          terraform_directory: terraform

      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          terraform_version: ${{ steps.terraform_version.outputs.version }}
          terraform_wrapper: false

      - uses: terraform-linters/setup-tflint@ae78205cfffec9e8d93fd2b3115c7e9d3166d4b6 # v5.0.0
        name: Setup TFLint
        with:
          tflint_version: v0.50.1

      - name: configure OIDC AWS credentials for terraform
        uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722 # v4.1.0
        with:
          role-to-assume: "arn:aws:iam::631181914621:role/oidc-incident-response-${{ inputs.account_name }}"
          role-session-name: github-actions-terraform-incident-response
          role-duration-seconds: 7400
          aws-region: eu-west-1

      - name: terraform format
        run: terraform fmt --check --recursive
        working-directory: terraform

      - name: TF Lint
        run: tflint --recursive
        working-directory: terraform

      - name: terraform init for environment
        env:
          TF_WORKSPACE: ${{ inputs.workspace }}
        run: terraform init -input=false
        working-directory: terraform

      - name: terraform plan
        env:
          TF_WORKSPACE: ${{ inputs.workspace }}
          TF_VAR_app_tag: ${{ inputs.image_tag }}
        run: |
          terraform workspace show
          terraform plan --lock-timeout=300s --parallelism=200 --out=${TF_WORKSPACE}.plan > ${TF_WORKSPACE}.log
        working-directory: terraform

      - name: output plan
        env:
          TF_WORKSPACE: ${{ inputs.workspace }}
        run: cat ${TF_WORKSPACE}.log
        working-directory: terraform

      - name: output concise plan
        env:
          TF_WORKSPACE: ${{ inputs.workspace }}
        run: cat ${TF_WORKSPACE}.log | grep '\.' | grep '#' || true
        working-directory: terraform

      - name: terraform apply
        if: inputs.apply
        env:
          TF_WORKSPACE: ${{ inputs.workspace }}
          TF_VAR_app_tag: ${{ inputs.image_tag }}
          CI: true
        run: terraform apply -parallelism=200 -lock-timeout=300s ${{ env.TF_WORKSPACE }}.plan
        working-directory: terraform
