version: '3'
services:

  response:
    build:
      context: .
      dockerfile: Dockerfile.response
    image: response
    entrypoint: bash
    command: /app/startup.sh --watch
    expose:
      - 8000
    depends_on:
      db:
        condition: service_healthy
    env_file: .env
    healthcheck:
      test: curl -f http://localhost:8000/ht/ || exit 1
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s
    volumes:
      - ./:/app
      - ../:/response
      - pypd:/app/pypd
    stdin_open: true
    tty: true
    restart: always

  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    image: response-nginx
    depends_on:
      response:
        condition: service_healthy
    environment:
      APP_HOST: response
      APP_PORT: 8000
    healthcheck:
      test: curl -f http://localhost/nginx-health || exit 1
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s
    volumes:
      - ./nginx/webpack/dist:/app/opgincidentresponse/static
    ports:
      - 80:80

  cron:
    build:
      context: .
      dockerfile: Dockerfile.cron
    image: cron
    container_name: cron
    depends_on:
      - response
    tty: true

  db:
    image: "postgres:15"
    container_name: postgres
    healthcheck:
      test: pg_isready --username=api --dbname=api
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_13_vol:/var/lib/postgresql/data/
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      PGPASSWORD: postgres

  ngrok:
    image: ngrok/ngrok:latest
    restart: unless-stopped
    command:
      - "http"
      - "http://response:8000"
    container_name: ngrok
    env_file: .env
    ports:
      - "4040:4040"
    depends_on:
      response:
        condition: service_healthy

volumes:
  postgres_data_13_vol:
  pypd:
